#!/usr/bin/python

import	os
import	sys
import	optparse

def	is_exe( filename ):
	return os.path.isfile(filename) and os.access(filename, os.X_OK)

def	which( program ):
	found = False
	if program.find( os.pathsep ) > -1:
		# Absolute or relative path is absolutely used as-is
		found = is_exe( program )
	else:
		for path in os.environ['PATH'].split( os.pathsep ):
			if path == '':
				path = '.'
			fpath = os.path.join( os.path.expanduser(path), program )
			found = is_exe(fpath)
			if found:
				program = fpath
				break
	if not found:
		print '  # Could not find "%s"!' % program
	return program

if __name__ == '__main__':
	parser = optparse.OptionParser()
	user = 'root'
	parser.add_option(
		'-u',
		'--user',
		dest='user',
		metavar='user',
		help='whom to write script for; default="%s".' % user,
		default=user
	)
	script = 'funky-stuff'
	parser.add_option(
		'-f',
		'--file',
		dest='script',
		metavar='FILE',
		help='script output; defaults to "%s".' % script,
		default=script
	)
	parser.add_option(
		'-o',
		'--out',
		dest='ofile',
		metavar='FILE',
		help='write to file; defaults to stdout.',
		default=None
	)
	opt, args = parser.parse_args()
	if opt.ofile:
		try:
			out = open( opt.ofile, 'wt' )
		except Exception, e:
			print >>sys.stder, 'Cannot open "%s" for writing.' % opt.ofile
			exit(1)
	else:
		out = sys.stdout
	interactive = os.isatty(0)
	if interactive:
		import	readline
		histfile = os.path.join( os.path.expanduser( '~' ), '.ditwhist' )
		try:
			readline.read_history_file( histfile )
		except IOError:
			pass
		import	atexit
		atexit.register( readline.write_history_file, histfile )
		del	histfile
		readline.parse_and_bind( 'tab: complete' )
		readline.set_history_length( 50 )
	commands = []
	as_root = True
	while True:
		try:
			if interactive:
				s = raw_input( '> ' )
			else:
				s = raw_input()
		except EOFError:
			break
		if s.startswith( '!' ):
			commands.append( '# ' + s[1:].strip() )
		else:
			if s.startswith( '#' ):
				as_root = True
				s = s[1:].strip()
			elif s.startswith( '$' ):
				as_root = False
				s = s[1:].strip()
			tokens = s.split()
			if len(tokens) == 0: continue
			if as_root:
				tokens[0] = which( tokens[0] )
			commands.append( ' '.join( tokens ) )
	if interactive:
		print
	print >>out, 'This command will open a new shell to be logged.'
	script = os.path.join(
		os.path.expanduser( '~%s' % opt.user ),
		opt.script
	)
	print >>out
	print >>out, 'TERM=dumb /bin/script -q %s' % script
	for command in commands:
		print >>out, '  %s' % command
	print >>out,'  # The output file is created by this command.'
	print >>out,'  # Do not leave it off, it closes the created shell.'
	print >>out, '  exit'
	print >>out
	print >>out,'Once this is done, please upload "%s" to the SR.' % script
	exit(0)
